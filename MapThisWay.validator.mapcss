meta
{
  title: "MapThisWay";
  version: "0.112";
  description: "Map This Way";
  author: "Francesco Ansanelli";
  watch-modified: true;
}

/* mtw missingdispensing */

*[amenity=pharmacy][!dispensing][inside("IT")] {
	throwWarning: tr("{0} without {1}", "{0.value}", "{1.key}");
	group: "MapThisWay";
}

/* mtw missingoven */

*[cuisine ~= "pizza"][!oven][inside("IT")] {
	throwWarning: tr("{0} without {1}", "{0.value}", "{1.key}");
	group: "MapThisWay";
}

/* mtw unknownoven */

*[oven][oven !~ /^(no|electric|wood_fired|gas_fired)$/] {
	throwWarning: tr("unusual value of {0}", "{0.key}");
	group: "MapThisWay";
}

/* mtw restaurantkebab */

*[amenity!=fast_food][cuisine ~= "kebab"][inside("IT")] {
	throwWarning: tr("{0} without {1}", "{1.value}", "{0.value}");
	group: "MapThisWay";
}

/* mtw addressonbuilding */

way[building][tag_regex("^addr:*")][inside("IT")] {
	throwWarning: tr("building with addr:*");
	group: "MapThisWay";
}

/* mtw buildingnoroof */

way[building][roof:levels=0][roof:shape!=flat] {
	throwWarning: tr("{0} with {1} {2} not {3} {4}", "{0.key}", "{1.key}", "{1.value}", "{2.key}", "{2.value}");
	group: "MapThisWay";
}

/* mtw namenotcapitalized */

*[addr:street =~ /^[a-z]/],
*[name =~ /^[a-z]/] {
	throwWarning: tr("{0} not capitalized", "{0.key}");
	group: "MapThisWay";
}

/* mtw missingauthorization */

*[shop=tobacco][!authorization][inside("IT")] {
	throwWarning: tr("{0} without {1}", "{0.value}", "{1.key}");
	group: "MapThisWay";
}

/* mtw wrongbuildingtype TOO MANY ERRORS

*[office][office!=government] ∈
*[building][building!~/^(apartments|commercial|office|industrial|retail|supermarket|warehouse|kiosk)$/]{
	throwWarning: tr("office inside wrong building type");
	group: "MapThisWay";
}
*/
/* mtw wrongbuildingtype */

*[office=government] ∈
*[building][building!=government]{
	throwWarning: tr("office inside wrong building type");
	group: "MapThisWay";
}

/* mtw wrongbuildingtype TOO MANY ERRORS

*[shop] ∈
*[building][building!~/^(apartments|commercial|office|industrial|retail|supermarket|warehouse|kiosk)$/] {
	throwWarning: tr("shop inside wrong building type");
	group: "MapThisWay";
}
 */

/* mtw amenitywithname */

*[amenity=~/^(drinking_water|bbq|charging_station|grit_bin|parking_entrance|ticket_validator|atm|bureau_de_change|baking_oven|bench|clock|photo_booth|post_box|table|telephone|vending_machine|waste_basket|waste_disposal|watering_place|water_point)$/][name] {
	throwWarning: tr("{0} with {1}", "{0.key}", "{1.key}");
	group: "MapThisWay";
}

/* mtw nodewithbuilding */

node[building] {
	throwWarning: tr("node with {0}", "{0.key}");
	group: "MapThisWay";
}

/* mtw citylimitwithoutdirection */

node[traffic_sign=city_limit][!direction] {
	throwWarning: tr("{0} without {1}", "{0.key}", "{1.key}");
	group: "MapThisWay";
}

/* mtw numerocivicoerrato */
*[addr:housenumber][addr:housenumber !~ /^(0|[1-9][0-9]*)([a-z]{0,1}|(\/[1-9][0-9]*[a-z]{0,1})|bis|((qua)?ter))(\b rosso\b)?$/][inside("IT")] {
	throwWarning: tr("Numero Civico");
	group: "MapThisWay";
	assertMatch: "00";
	assertMatch: "01";
	assertMatch: "a";
	assertMatch: "1A";
	assertMatch: "1 a";
	assertMatch: "1/BIS";
	assertMatch: "0/0";
	assertMatch: "1 nero";
	assertNoMatch: "1";
	assertNoMatch: "1a";
	assertNoMatch: "1bis";
	assertNoMatch: "1ter";
	assertNoMatch: "1quater";
	assertNoMatch: "1/1";
	assertNoMatch: "95/1a";
	assertNoMatch: "1 rosso";
	assertNoMatch: "0";
	assertNoMatch: "0a";
}

/* ENABLE AFTER MY PATCH GET MERGED:
 * https://josm.openstreetmap.de/ticket/18166
 *
*["addr:housenumber"][replace(tag("addr:housenumber"),",",";") != join_list(";",filter("^(0|[1-9][0-9]*)([a-z]{0,1}|(\\/[1-9][0-9]*[a-z]{0,1})|bis|((qua)?ter))(\\b rosso\\b)?$",split(";",replace(tag("addr:housenumber"),",",";"))))][inside("IT")] {
	throwWarning: tr("Numero Civico");
	group: "MapThisWay";
	assertMatch: "00";
	assertMatch: "01";
	assertMatch: "a";
	assertMatch: "1A";
	assertMatch: "1 a";
	assertMatch: "1/BIS";
	assertMatch: "0/0";
	assertMatch: "1 nero";
	assertNoMatch: "1";
	assertNoMatch: "1a";
	assertNoMatch: "1bis";
	assertNoMatch: "1ter";
	assertNoMatch: "1quater";
	assertNoMatch: "1/1";
	assertNoMatch: "95/1a";
	assertNoMatch: "1 rosso";
	assertNoMatch: "0";
	assertNoMatch: "0a";
	assertNoMatch: "1;3";
	assertNoMatch: "1,3";
}*/

/* mtw unusualvending
 * https://josm.openstreetmap.de/ticket/17751
 *
*[amenity=vending_machine][vending][tag("vending") != join_list(";",filter("^(admission_tickets|animal_feed|art|bicycle_tube|books|bottle_return|bread|candles|chemist|chewing_gums|cigarettes|coffee|condoms|drinks|electronics|elongated_coin|excrement_bags|feminine_hygiene|first_aid|fishing_bait|fishing_tackle|flowers|food|fuel|ice_cream|ice_cubes|ink_cartridges|laundry_detergent|lottery|milk|newspapers|parcel_mail_in|parcel_pickup|parking_tickets|public_transport_plans|public_transport_tickets|sex_toys|SIM_cards|stamps|sweets|syringes|telephone_vouchers|toll|toys|umbrellas|water)$",split(";",tag("vending"))))] {
	throwWarning: tr("unusual value of {0}", "{1.key}");
	group: "MapThisWay";
}*/

/* mtw roundaboutwithname */

way[junction=roundabout][name] {
	throwWarning: tr("Roundabout with name");
	group: "MapThisWay";
}

/* mtw wifiyes */

*[wifi=yes] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "internet_access=wlan";
	group: "MapThisWay";
	fixRemove: "wifi";
        fixAdd: "internet_access=wlan";
}

/* mtw wifino */

*[wifi=no] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "internet_access";
	group: "MapThisWay";
	fixChangeKey: "wifi => internet_access";
}

/* mtw wififree */

*[wifi=free] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "internet_access=wlan";
	group: "MapThisWay";
	fixRemove: "wifi";
        fixAdd: "internet_access=wlan";
        fixAdd: "internet_access:fee=no";
}

/* mtw officetravelagent */

*[office=travel_agent] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "shop=travel_agency";
	group: "MapThisWay";
	fixRemove: "office";
        fixAdd: "shop=travel_agency";
}

/* mtw refwithspace - suggested by Andrea Musuruane */

way[highway][ref =~ /\s+/] {
	throwWarning: tr("ref with spaces");
	group: "MapThisWay";
}


/* mtw landusewithname - suggested by Andrea Musuruane
SHOULD BE INVESTIGATED MORE BEFORE ENABILING...
way[landuse][name] {
	throwWarning: tr("{0} with {1}", "{0.key}", "{1.key}");
	group: "MapThisWay";
}
*/

/* mtw onlychristian - suggested by Andrea Musuruane */

*[amenity=place_of_worship][religion=christian][!denomination] {
	throwWarning: tr("{0} without {1}", "{0.value}", "{2.key}");
	group: "MapThisWay";
}

/* mtw trafficsingunconnected - suggested by Andrea Musuruane */

node:unconnected[traffic_sign][traffic_sign=city_limit] {
	throwWarning: tr("{0}", "{2.tag}");
	group: "MapThisWay";
}

/* mtw facebookaswebsite */

*[website =~ /facebook/] {
	throwWarning: tr("{0}", "{0.tag}");
	group: "MapThisWay";
}

/* mtw invalidphone */

*["contact:phone"]["contact:phone" !~ /^\+39[- ]0[0-9]+[- ][0-9]+$/][inside("IT")],
*[phone][phone !~ /^\+39[- ]0[0-9]+[- ][0-9]+$/][inside("IT")] {
	throwWarning: tr("{0}", "{0.key}");
	group: "MapThisWay";
}

/* mtw invalidmobilephone */

*["contact:mobile"]["contact:mobile" !~ /^\+39[- ]3[0-9]{2}[- ][0-9]{6,7}$/][inside("IT")],
*["phone:mobile"]["phone:mobile" !~ /^\+39[- ]3[0-9]{2}[- ][0-9]{6,7}$/][inside("IT")] {
	throwWarning: tr("{0}", "{0.key}");
	group: "MapThisWay";
}

/* mtw invalidtollfree */

*["contact:phone:IT"]["contact:phone:IT" !~ /^8[0-9]{2}[- ][0-9]+$/],
*["phone:IT"]["phone:IT" !~ /^8[0-9]{2}[- ][0-9]+$/] {
	throwWarning: tr("{0}", "{0.key}");
	group: "MapThisWay";
}

/* mtw busonwrongelement */
node[public_transport != "stop_position"][bus="yes"] {
	throwWarning: tr("{0} on suspicious object", "{1.tag}");
	group: "MapThisWay";
	fixRemove: "bus";
}

/* mtw shoplamps */

*[shop=lamps] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "shop=lighting";
	group: "MapThisWay";
	fixRemove: "shop";
	fixAdd: "shop=lighting";
}

/* mtw naturaltreenotmonumental - suggested by canfe */

node[natural=tree][!tag_regex("^(name|genus|species)")] {
	throwWarning: tr("{0} without name, genus or species", "{0.tag}");
	group: "MapThisWay";
}

/* mtw invaliddug - suggested by canfe */

way[highway][highway != "cycleway"][highway != "path"][name][name !~ /^(?i)(arco|autostrada|belvedere|calata|calle|cavalcavia|circonvallazione|corso|corte|cortile|discesa|galleria|gradinata|larghetto|largo|litoranea|lungargine|lungo[a-z]+|molo|parcheggio|passaggio|passeggiata|percorso ciclabile|percorso ciclopedonale|percorso pedonale|piazza|piazzale|piazzetta|pista ciclabile|ponte|raccordo|rampa|ronco|rotatoria|rotonda|salita|scalinata|scesa|sentiero|slargo|sottopasso|sovrappasso|spiazzo|strada|strada antica|strada comunale|strada consortile|strada nuova|strada panoramica|strada poderale|strada privata|strada provinciale|strada regionale|strada statale|strada vecchia|strada vicinale|stradella|stradello|stradone|tangenziale|traversa|traversa privata|via|viadotto|via antica|via comunale|via nazionale|via nuova|via panoramica|via privata|via provinciale|via vecchia|viale|vialetto|vico|vico chiuso|vico cieco|vico privato|vicoletto|vicolo|vicolo chiuso|vicolo cieco|vicolo privato|viottolo)[ ]/][inside("IT")] {
	throwWarning: tr("unusual value of {0}", "{1.key}");
	group: "MapThisWay";
}

/* mtw invalidstartdate */

*["start_date"]["start_date" !~ /^[0-9]{1,4}(-[0-9]{2})?(-[0-9]{2})?$/] {
	throwWarning: tr("{0}", "{0.key}");
	group: "MapThisWay";
}

/* mtw fblink */

*[facebook] {
	throwWarning: tr("{0} is deprecated", "{0.key}");
	suggestAlternative: "contact:facebook";
	group: "MapThisWay";
	fixChangeKey: "facebook => contact:facebook";
}

*["contact:facebook"]["contact:facebook" !~ /^https:\/\/www\.facebook\.com\//] {
	throwWarning: tr("{0}", "{0.tag}");
	group: "MapThisWay";
}

/* mtw iglink */

*["contact:instagram"]["contact:instagram" !~ /^(https:\/\/www\.instagram\.com\/)|@/] {
	throwWarning: tr("{0}", "{0.tag}");
	group: "MapThisWay";
}

/* mtw ischedit */

*["isced:level"]["isced:level" !~ /^[0-3]$/][inside("IT")] {
	throwWarning: tr("{0}", "{0.tag}");
	group: "MapThisWay";
}

/* mtw scuolainfanzia */

*[amenity!=kindergarten]["name" =~ /(?i)(scuola (materna|dell'infanzia))|asilo/] {
	throwWarning: tr("{0}", "{0.tag}");
	group: "MapThisWay";
}

/* mtw nidonotnursery */

*[amenity=kindergarten]["name" =~ /(?i)nido/][nursery!=yes] {
	throwWarning: tr("{0} without {1}", "{0.value}", "{2.tag}");
	group: "MapThisWay";
	fixAdd: "nursery=yes";
}

/* mtw scuolainfanzianoisched */

*[amenity=kindergarten]["isced:level" != "0"] {
	throwWarning: tr("{0} without {1}", "{0.value}", "{1.key}");
	group: "MapThisWay";
	fixRemove: "isced:level";
	fixAdd: "isced:level=0";
}

/* mtw scuolaelementare */

*["name" =~ /(?i)scuola (primaria|elementare)/] {
	set scuola_elementare;
}

*[amenity!=school].scuola_elementare {
	throwWarning: tr("scuola elementare senza amenity=school");
	group: "MapThisWay";
}

*["isced:level" != "1"][amenity=school].scuola_elementare {
	throwWarning: tr("scuola elementare senza isched:level o isched:level non valido");
	group: "MapThisWay";
	fixRemove: "isced:level";
	fixAdd: "isced:level=1";
}

/* mtw scuolemedie */

*["name" =~ /(?i)scuola (media( inferiore)?)|(secondaria)/] {
	set scuola_media;
}

*["isced:level" != "2"][amenity=school].scuola_media {
	throwWarning: tr("scuola media senza isched:level o isched:level non valido");
	group: "MapThisWay";
	fixRemove: "isced:level";
	fixAdd: "isced:level=2";
}

/* mtw scuolesuperiori */

*["name" =~ /(?i)(istituto (magistrale|(di istruzione superiore)|tecnico|commerciale))|liceo/] {
	set scuola_superiore;
}

*["isced:level" != "3"][amenity=school].scuola_superiore {
	throwWarning: tr("scuola superiore senza isched:level o isched:level non valido");
	group: "MapThisWay";
	fixRemove: "isced:level";
	fixAdd: "isced:level=3";
}

/* mtw unkwnownschool */

*[amenity=school]!.scuola_superiore!.scuola_media!.scuola_elementare {
	throwWarning: tr("scuola non riconosciuta");
	group: "MapThisWay";
}

/* mtw crossing */

way[highway] > node[highway=crossing],
way[highway=footway][footway=crossing],
way[highway=cycleway][cycleway=crossing] {
	set attraversamento_pedonale;
}

/* mtw crossingunknown */

*[crossing][crossing!=no]!.attraversamento_pedonale,
*[highway=crossing]!.attraversamento_pedonale {
        throwWarning: tr("Attraversamento pedonale non riconosciuto");
	group: "MapThisWay";
}

/* mtw crossingzebranouk */

*[crossing=zebra][outside("GB")].attraversamento_pedonale {
	throwWarning: tr("{0} outside of UK", "{0.tag}");
	suggestAlternative: "crossing=uncontrolled";
	group: "MapThisWay";
	fixRemove: "crossing";
	fixAdd: "crossing=uncontrolled";
	fixAdd: "crossing_ref=zebra";
}

/* mtw crossingmarked */

*[crossing=marked].attraversamento_pedonale {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "crossing=uncontrolled";
	group: "MapThisWay";
	fixRemove: "crossing";
	fixAdd: "crossing=uncontrolled";
}

/* mtw crossingcalming */

*[traffic_calming][traffic_calming!=table].attraversamento_pedonale {
	throwWarning: tr("{0}", "{0.key}");
	group: "MapThisWay";
	fixRemove: "traffic_calming";
	fixAdd: "traffic_calming=table";
}

/* mtw tracktypenottrack */

way[tracktype][highway!=track] {
	throwWarning: tr("{0} not {1}", "{0.key}", "{1.tag}");
	group: "MapThisWay";
}

/* mtw comma */

*[cuisine =~ /,/] {
	throwWarning: tr("{0} with comma", "{0.key}");
	group: "MapThisWay";
}

/* mtw randomhighwayservice */

way[highway!=service][service] {
	throwWarning: tr("{0} not {1}", "{0.key}", "{1.key}");
	group: "MapThisWay";
}

/* mtw towervsmast */

node["tower:type"=communication][man_made != mast] {
	throwWarning: tr("{0} not {1}", "{0.key}", "{1.value}");
	group: "MapThisWay";
	fixRemove: "man_made";
	fixAdd: "man_made=mast";
}

/* mtw coinsinstadofcash */

*[amenity!="vending_machine"]["payment:coins"] {
	throwWarning: tr("{0}", "{1.key}");
	group: "MapThisWay";
	suggestAlternative: "payment:cash";
	fixChangeKey: "payment:coins => payment:cash";
}

/* mtw inknotprinter */

*[shop=ink] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "shop=printer_ink";
	group: "MapThisWay";
	fixRemove: "shop";
	fixAdd: "shop=printer_ink";
}

/* mtw farmyardwithoutfarm - Suggested by Andrea Musuruane */

*[place=farm] ⊈ area:closed2[landuse=farmyard] {
	throwWarning: tr("{0} without place=farm", "{1.tag}");
	group: "MapThisWay";
}

/* mtw farmnotinsidefarmyard - Suggested by Andrea Musuruane */

area[landuse=farmyard] ⊉ *[place=farm] {
	throwWarning: tr("{0} not inside landuse=farmyard", "{0.tag}");
	group: "MapThisWay";
}


/* mtw onelanenooneway - Suggested by Volker */

way[highway][lanes<2][!oneway] {
	throwWarning: tr("{0} {1}<{2} without {3}", "{0.key}", "{1.key}", "{1.value}", "{2.key}");
	group: "MapThisWay";
}

/* mtw onelanenopassingplaces - Suggested by Andrea Musuruane */

way[highway][lanes<2][oneway=no][passing_places!=yes] {
	throwWarning: tr("{0} {1}<{2} with {3} without {4}", "{0.key}", "{1.key}", "{1.value}", "{2.tag}", "{3.tag}");
	group: "MapThisWay";
	fixAdd: "passing_places=yes";
}

/* mtw passingplacesmanylanes */

way[highway][lanes>=2][passing_places] {
	throwWarning: tr("{0} {1}>={2} with {3}", "{0.key}", "{1.key}", "{1.value}", "{2.key}");
	group: "MapThisWay";
	fixAdd: "lane_markings=no";
	fixRemove: "passing_places";
}

/* mtw onelanelanemarkings */

way[highway][lanes<2][lane_markings] {
	throwWarning: tr("{0} {1}<{2} with {3}", "{0.key}", "{1.key}", "{1.value}", "{2.key}");
	group: "MapThisWay";
	fixRemove: "lane_markings";
}

/* mtw clinicnothealthcare */

*[social_facility][social_facility=healthcare] {
	throwWarning: tr("{0} is deprecated", "{0.tag}");
	suggestAlternative: "amenity=clinic";
	group: "MapThisWay";
	fixRemove: "social_facility";
	fixAdd: "amenity=clinic";
}

/* mtw milestone */
*[addr:milestone][addr:milestone !~ /^(?:km|mi)\. [0-9]*[.+]?[0-9]+$/] {
	throwWarning: tr("Invalid milestone");
	group: "MapThisWay";
}

/* mtw milestoneswithhousenumber */
*[addr:milestone][addr:housenumber] {
	throwWarning: tr("{0} with {1}", "{0.key}", "{1.key}");
	group: "MapThisWay";
}

/* mtw accessyes */
way[highway][access=permissive],
way[highway][access=yes] {
	throwWarning: tr("{0} with {1} is harmful", "{0.key}", "{1.tag}");
	group: "MapThisWay";
	fixRemove: "access";
}

/* mtw pathwithfootyes */
way[highway=path][foot=yes][!horse] {
	throwWarning: tr("{0} with {1} is redundant", "{0.value}", "{1.tag}");
	group: "MapThisWay";
	suggestAlternative: "foot=designated";
	fixAdd: "foot=designated";
}

/* mtw pathwithbicycleyes */
way[highway=path][bicycle=yes][!horse] {
	throwWarning: tr("{0} with {1} is redundant", "{0.value}", "{1.tag}");
	group: "MapThisWay";
	suggestAlternative: "bicycle=designated";
	fixAdd: "bicycle=designated";
}

/* mtw segregatednofoot */
way[segregated][!foot] {
	throwWarning: tr("{0} without {1}", "{0.key}", "{1.key}");
	group: "MapThisWay";
}

/* mtw segregatednobicicle */
way[segregated][!bicycle] {
	throwWarning: tr("{0} without {1}", "{0.key}", "{1.key}");
	group: "MapThisWay";
}

/* mtw segregatedwronghighway */
*[segregated][highway != path][highway != cycleway][highway != footway] {
	throwWarning: tr("{0} without {1}, {2}, {3}", "{0.key}", "{1.tag}", "{2.tag}", "{3.tag}");
	group: "MapThisWay";
}
